
PARSER_BEGIN(Analizador)

public class Analizador {
    public static void main (String[] args) {
        try{
            Analizador checador =  new Analizador(System.in);
            System.out.println("ocean,numCycl,year,name,numTrcks,yearTrck,monthTrck,dayTrck,hourTrck,minutsTrck,recordId,statusSys,latitude,longitude,maxSustWin,minPress,34ktNE,34ktSE,34ktSW,34ktNW,50ktNE,50ktSE,50ktSW,50ktNW,64ktNE,64ktSE,64ktSW,64ktNW,radMaxWind");
            checador.run();
            
        }
        catch (ParseException e){
            System.out.println("Hay un error  :(");
            System.out.println(e.getMessage());
        }
    }
}
PARSER_END(Analizador)

SKIP:{
     "\t" | "\r" |"\n"
}


TOKEN : {
    <COMA: "," >  |
    <PUNTO: "." > {System.out.println("PUNTO");} |
    <DOS_PUNTOS: ":" > {System.out.println("DOS PUNTOS");}
    
}
TOKEN : {
<IDENTIFICADOR: ("AL"|"EP"|"CP") (["0"-"9"]) {6} <COMA> > {
    String cadena = image.toString();
    cadena = cadena.replace(" " , "");
    matchedToken.image = cadena;
    } |
<NOMBRE: (" ")*(["A"-"Z","a"-"z", "-"])+ (["0"-"9"]){0,2}(" ")?<COMA> (" ")* (["0"-"9"]){1,3}<COMA>(" ")? >{
    cadena = image.toString();
    cadena = cadena.replace(" " , "");
    cadena = cadena.replace("\r" , "");
    cadena = cadena.replace("\n" , "");
    matchedToken.image = cadena;
}|

<FECHA: (["0"-"9"]){8} <COMA> >{
    cadena = image.toString();
    cadena = cadena.replace(" " , "");
    matchedToken.image = cadena;
}|

<RECID: (" ")* ("C"|"G"|"I"|"L"|"P"|"R"|"S"|"T"|"W")?<COMA> (" ")*("TD"|"TS"|"HU"|"EX"|"SD"|"SS"|"LO"|"WV"|"DB"|"ET"|"PT"|"ST"|"TY") <COMA>>{
    String[] separador;
    cadena = image.toString();
    separador = cadena.split("," , 2 );
    separador[0] = separador[0].replace(" ", "");
    separador[1] = separador[1].replace(" ","");

    cadena = cadena.replace(" " , "");
    
    if ( separador[0].isEmpty() )
	{
		separador[0] = "NULL";
	}
    
    
    matchedToken.image = separador[0] + "," + separador[1];
}|

<LATITUD:(" ")* (["0"-"9"]){1,3} <PUNTO> ["0"-"9"] ("N"|"S") <COMA>>{
    cadena = image.toString();
    cadena = cadena.replace(" " , "");
    if(cadena.contains("S")){
        
        cadena = "-"+cadena;
    }
    
    cadena.replace("N", "");
    
    matchedToken.image = cadena;
}|
<LONGITUD:(" ")* (["0"-"9"]){1,3}<PUNTO> ["0"-"9"] ("W"|"E") <COMA>>{ 
    cadena = image.toString();
    cadena = cadena.replace(" " , "");
    if(cadena.contains("W")){
        
        cadena = "-"+ cadena;
    }
    
    cadena.replace("E", "");
    
    matchedToken.image = cadena;
}|
<VALOR: (" ")+  ("-")? (["0"-"9"])* (<COMA>|"")>{
    cadena = image.toString();
    cadena = cadena.replace(" " , "");
    matchedToken.image = cadena;
}

}

void run():{Token t; String cadena, auxiliar, id;} {
        (
            id = huracan(){}
            (
                t = <FECHA>{
                    auxiliar = t.image;
                    cadena =auxiliar.substring(0,4) + "," + auxiliar.substring(4,6) + "," + auxiliar.substring(6);
                    }
                t = <VALOR>{
                    auxiliar = t.image;
                    cadena =cadena + auxiliar.substring(0,2) + "," + auxiliar.substring(2);
                    }
                t = <RECID>{cadena = cadena + t.image;}
                t = <LATITUD>{ cadena = cadena + t.image.replace("N","").replace("S","");}
                t = <LONGITUD>{cadena = cadena + t.image.replace("W","").replace("E",""); }
                t = <VALOR>{cadena = cadena + t.image;}
                (t = <VALOR>{cadena = cadena + t.image.replace("-999","NULL");})+
                {System.out.println(id + cadena);}
            )+
        )+
        }


String huracan():{Token t; String cadena, auxiliar;}{
    t = <IDENTIFICADOR>{
        cadena = t.image;
        cadena = cadena.substring(0,2) + "," + cadena.substring(2,4) + "," + cadena.substring(4);
        }
    t = <NOMBRE>{cadena = cadena + t.image;
    return cadena;}
    

}


