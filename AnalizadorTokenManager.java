/* Generated By:JavaCC: Do not edit this line. AnalizadorTokenManager.java */

/** Token Manager. */
public class AnalizadorTokenManager implements AnalizadorConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 4);
      case 13:
         return jjStopAtPos(0, 5);
      case 32:
         return jjStartNfaWithStates_0(0, 13, 72);
      case 44:
         return jjStartNfaWithStates_0(0, 1, 73);
      case 46:
         return jjStopAtPos(0, 2);
      case 58:
         return jjStopAtPos(0, 3);
      default :
         return jjMoveNfa_0(8, 0);
   }
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   //int[] nextStates; // not used
   int startsAt = 0;
   jjnewStateCnt = 72;
   int i = 1;
   jjstateSet[0] = startState;
   //int j; // not used
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 61;
                  else if (curChar == 44)
                  {
                     if (kind > 13)
                        kind = 13;
                  }
                  else if (curChar == 45)
                  {
                     if (kind > 13)
                        kind = 13;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 32)
                  {
                     if (kind > 13)
                        kind = 13;
                     jjCheckNAddStates(3, 7);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(50, 54);
                  else if (curChar == 32)
                     jjCheckNAddTwoStates(48, 49);
                  else if (curChar == 44)
                     jjCheckNAddStates(8, 15);
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(11, 12);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 46);
                  else if (curChar == 32)
                     jjCheckNAddTwoStates(40, 41);
                  else if (curChar == 44)
                     jjCheckNAddTwoStates(36, 37);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  else if (curChar == 32)
                     jjCheckNAddStates(16, 18);
                  if (curChar == 32)
                     jjCheckNAddStates(19, 21);
                  if (curChar == 32)
                     jjCheckNAddTwoStates(32, 11);
                  break;
               case 73:
                  if (curChar == 32)
                     jjCheckNAddStates(8, 15);
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 38;
                  if (curChar == 32)
                     jjCheckNAdd(37);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(22, 28);
                  else if (curChar == 44)
                     jjCheckNAddStates(29, 38);
                  else if (curChar == 32)
                  {
                     if (kind > 13)
                        kind = 13;
                     jjCheckNAddStates(39, 55);
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if (curChar == 44 && kind > 6)
                     kind = 6;
                  break;
               case 11:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 12:
                  if (curChar == 44 && kind > 7)
                     kind = 7;
                  break;
               case 14:
                  if (curChar == 44)
                     jjCheckNAddStates(8, 15);
                  break;
               case 15:
                  if (curChar == 32)
                     jjCheckNAddStates(8, 15);
                  break;
               case 17:
                  if (curChar == 44 && kind > 10)
                     kind = 10;
                  break;
               case 31:
                  if (curChar != 32)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddStates(39, 55);
                  break;
               case 32:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(32, 11);
                  break;
               case 33:
                  if (curChar == 32)
                     jjCheckNAddStates(19, 21);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 35:
                  if (curChar == 44)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 36:
                  if (curChar == 32)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if (curChar == 10 && kind > 8)
                     kind = 8;
                  break;
               case 39:
                  if (curChar == 32)
                     jjCheckNAddStates(16, 18);
                  break;
               case 40:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 46);
                  break;
               case 42:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 45:
                  if (curChar == 44 && kind > 11)
                     kind = 11;
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(47, 42);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(42);
                  break;
               case 48:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(50, 54);
                  break;
               case 50:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 53:
                  if (curChar == 44 && kind > 12)
                     kind = 12;
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(55, 50);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(50);
                  break;
               case 56:
                  if (curChar != 32)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddStates(3, 7);
                  break;
               case 57:
                  if (curChar != 45)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddStates(0, 2);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddStates(0, 2);
                  break;
               case 59:
                  if (curChar == 44 && kind > 13)
                     kind = 13;
                  break;
               case 60:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 61:
                  if (curChar == 10 && kind > 13)
                     kind = 13;
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(22, 28);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 70:
                  if (curChar == 44 && kind > 9)
                     kind = 9;
                  break;
               case 71:
                  if (curChar == 44)
                     jjCheckNAddStates(29, 38);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 72:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  if ((0x9d1288L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 73:
                  if (curChar == 83)
                     jjCheckNAddTwoStates(28, 29);
                  else if (curChar == 84)
                     jjCheckNAddTwoStates(28, 29);
                  else if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 25;
                  else if (curChar == 87)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 21;
                  else if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 72)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 8:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  if ((0x9d1288L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 0:
                  if (curChar == 76)
                     jjCheckNAdd(1);
                  break;
               case 9:
                  if (curChar == 65)
                     jjCheckNAdd(1);
                  break;
               case 10:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 13:
                  if ((0x9d1288L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 85)
                     jjCheckNAdd(17);
                  break;
               case 18:
                  if (curChar == 72)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 19:
                  if (curChar == 88)
                     jjCheckNAdd(17);
                  break;
               case 20:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 79)
                     jjCheckNAdd(17);
                  break;
               case 22:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 86)
                     jjCheckNAdd(17);
                  break;
               case 24:
                  if (curChar == 87)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 66)
                     jjCheckNAdd(17);
                  break;
               case 26:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 84)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 28:
                  if (curChar == 68)
                     jjCheckNAdd(17);
                  break;
               case 29:
                  if (curChar == 83)
                     jjCheckNAdd(17);
                  break;
               case 30:
                  if (curChar == 83)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 44:
                  if ((0x84000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 52:
                  if ((0x800020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 72 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   58, 59, 60, 56, 57, 58, 59, 60, 15, 18, 20, 22, 24, 26, 27, 30, 
   39, 13, 14, 33, 34, 35, 34, 35, 63, 42, 50, 54, 46, 36, 37, 15, 
   18, 20, 22, 24, 26, 27, 30, 32, 11, 33, 34, 35, 39, 13, 14, 40, 
   41, 48, 49, 56, 57, 58, 59, 60, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\54", "\56", "\72", "\12", "\15", null, null, null, null, null, null, 
null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x3fffL, 
};
static final long[] jjtoSkip = {
   0xc000L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[72];
static private final int[] jjstateSet = new int[144];
static StringBuffer image;
static int jjimageLen;
static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public AnalizadorTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public AnalizadorTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 72; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String tokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   tokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, tokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  //int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 9 && (0x200L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 2 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[2]);
        lengthOfMatch = jjstrLiteralImages[2].length();
                   System.out.println("PUNTO");
         break;
      case 3 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[3]);
        lengthOfMatch = jjstrLiteralImages[3].length();
                        System.out.println("DOS PUNTOS");
         break;
      case 6 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    String cadena = image.toString();
    cadena = cadena.replace(" " , "");
    matchedToken.image = cadena;
         break;
      case 7 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    cadena = image.toString();
    cadena = cadena.replace(" " , "");
    matchedToken.image = cadena;
         break;
      case 8 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    cadena = image.toString();
    cadena = cadena.replace(" " , "");
    cadena = cadena.replace("\r" , "");
    cadena = cadena.replace("\n" , "");
    matchedToken.image = cadena;
         break;
      case 9 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    cadena = image.toString();
    cadena = cadena.replace(" " , "");
    matchedToken.image = cadena;
         break;
      case 10 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    cadena = image.toString();
    cadena = cadena.replace(" " , "");
    matchedToken.image = cadena;
         break;
      case 11 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    cadena = image.toString();
    cadena = cadena.replace(" " , "");
    matchedToken.image = cadena;
         break;
      case 12 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    cadena = image.toString();
    cadena = cadena.replace(" " , "");
    matchedToken.image = cadena;
         break;
      case 13 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    cadena = image.toString();
    cadena = cadena.replace(" " , "");
    matchedToken.image = cadena;
         break;
      default : 
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
